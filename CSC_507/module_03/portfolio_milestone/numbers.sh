#!/bin/bash
# ---------------------------------------------------------------------------------------
# BASH Number Generator.
#
# Generates a million random integers and saves them to a file named file1.txt. Also, 
# calculates and displays the runtime.
#
# Usage:
#	$ chmod +x numbers.sh
#	$ ./numbers.sh
# ---------------------------------------------------------------------------------------
n=1000000 # Upper limit.
num_cores=$(nproc --all) # Get the number of CPU cores available.
filename=file1.txt # BASH output file.

# Generate numbers based on the passed count.
looper() {
    temp_file="temp_$1.txt" # Temp file for storage.
    shuf -i 1-1000000 -n "$2" > "$temp_file" # Generate $2 random numbers in the range from 1 to 1000000 using shuf.
}

# Split looper's processing up into the number of available CPU cores.
multithread() {
    remaining=$n # Keep track of the remaining numbers to generate.
    for i in $(seq 1 $num_cores); do
        if [ $remaining -gt 0 ]; then
            count=$((remaining / (num_cores - i + 1))) # Evenly distribute remaining numbers among cores.
            if [ $count -eq 0 ]; then
                count=1 # Ensure at least one number is generated by the last core.
            fi
            looper $i $count & # Pass the count to looper.
            remaining=$((remaining - count)) # Decrease remaining count.
        fi
    done
    wait # Wait for all threads to complete execution.
    cat temp_*.txt > "$filename" # Concatenate temp files content into our final single output file.
    rm temp_*.txt # Clean up temporary files.
}

# Main driver function.
main() {
    start_time=$(date +"%s.%N") # Start runtime timer.
    multithread # Run several threads to produce the million random integers faster.
    end_time=$(date +"%s.%N") # End runtime timer.
    duration=$(echo "$end_time - $start_time" | bc) # Subtract times and store the result.
    echo "Bash runtime: $(printf "%8.4f" "$duration") seconds" # Display runtime.
}

# Big red activation button.
main

