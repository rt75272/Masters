	The disciplines of a traditional architecture and software architecture have some similarities as well as differences. For a traditional architecture, take for example building a car. Both building a car and software requires an initial plan. The plans will include materials, tools, technologies, etc required to implement the desired features in the car and software. Once a plan and blueprint is in place both can start the building process. Both will start will building up a frame as the base, then filling in the base with all the desired features. Once completed, both will require maintenance in order to keep the system running smoothly. Despite the similarities between the two there are some differences as well. 
	Between building a car and software some differences arise. For example, at the beginning phase of the builds, a car will require significantly more materials to get started. Whereas, software requires very little to get started. Therefore, the materials overhead is certainly a difference between the two. This is because building a car is more tangible than building a software system. Another difference is when a software system is complete it can easily be distributed to millions of people. As apposed to once a car is built, a factory needs to build vasts amounts of the same car in order to distribute to a large number of people. Therefore, both architectures have similar building processes while possessing different requirements. 
