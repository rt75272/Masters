Compare adjacency matrix and adjacency list representations of graphs. What are the trade-offs between them?
	Adjacency matrices and adjacency lists are two common representations of graphs in computer science, each with distinct advantages and disadvantages. An adjacency matrix is a 2D array where each cell at position (i, j) indicates whether an edge exists between vertex i and vertex j. It offers constant time access for edge lookups, making it efficient for dense graphs, but it requires O(V^2) space, which can be wasteful for sparse graphs. In contrast, an adjacency list consists of an array where each index corresponds to a vertex and contains a list of all adjacent vertices, requiring O(V+E) space, making it more suitable for sparse graphs. However, checking for the existence of an edge takes O(V) time in the worst case. The choice between these representations often depends on the graph's density and the specific operations performed most frequently; for dense graphs, an adjacency matrix is preferred due to its quick access time, while for sparse graphs, an adjacency list is typically more space-efficient.

